# 自定义日志收集配置模板
# 复制此文件并根据您的需求进行修改

# ====== 专用配置模板文件 ======
# 如需使用以下日志收集配置，请复制对应模板文件的内容：
# 
# 1. Nginx日志收集：nginx-logs-template.conf
# 2. Java日志收集：java-logs-template.conf
#
# 使用方法：
# - 复制对应模板文件的内容到此文件或 fluent-bit.conf 中
# - 根据实际环境修改路径、标签等配置
# - 取消注释需要的配置段落

# ====== 通用日志收集示例 ======

# 示例1: 收集通用应用日志文件
# [INPUT]
#     Name              tail
#     Tag               app.logs
#     Path              /var/log/your-app/*.log
#     Parser            your_app_parser
#     DB                /tmp/flb_app.db
#     Mem_Buf_Limit     20MB
#     Skip_Long_Lines   On
#     Refresh_Interval  5
#     storage.type      filesystem

# 示例3: 收集系统日志
# [INPUT]
#     Name              tail
#     Tag               system.logs
#     Path              /var/log/messages
#     Parser            syslog
#     DB                /tmp/flb_system.db
#     Mem_Buf_Limit     10MB
#     Skip_Long_Lines   On
#     Refresh_Interval  10
#     storage.type      filesystem

# ====== 网络日志收集示例 ======

# 示例4: TCP日志接收
# [INPUT]
#     Name              tcp
#     Tag               tcp.logs
#     Listen            0.0.0.0
#     Port              5170
#     Format            json
#     storage.type      filesystem

# 示例5: UDP Syslog接收
# [INPUT]
#     Name              syslog
#     Mode              udp
#     Listen            0.0.0.0
#     Port              5140
#     Parser            syslog-rfc3164
#     Tag               syslog.udp
#     storage.type      filesystem

# ====== 自定义解析器示例 ======

# 通用应用日志解析器
# [PARSER]
#     Name         your_app_parser
#     Format       regex
#     Regex        ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \[(?<level>\w+)\] (?<message>.*)$
#     Time_Key     time
#     Time_Format  %Y-%m-%d %H:%M:%S

# JSON格式日志解析器
# [PARSER]
#     Name         json_parser
#     Format       json
#     Time_Key     timestamp
#     Time_Format  %Y-%m-%dT%H:%M:%S.%L
#     Time_Keep    On

# ====== 日志过滤和处理示例 ======

# 为自定义日志添加标签
# [FILTER]
#     Name          modify
#     Match         app.logs
#     Add           service your-app-name
#     Add           environment production
#     Add           log_type application

# 过滤特定内容
# [FILTER]
#     Name          grep
#     Match         app.logs
#     Exclude       message healthcheck
#     Exclude       message ping

# 解析JSON格式的日志字段
# [FILTER]
#     Name          parser
#     Match         app.logs
#     Key_Name      message
#     Parser        json_parser
#     Reserve_Data  On

# 重命名字段
# [FILTER]
#     Name          modify
#     Match         app.logs
#     Rename        msg message
#     Rename        lvl level

# ====== 使用说明 ======
# 1. 根据您的日志类型和位置，取消注释相应的配置块
# 2. 修改 Path 参数指向您的实际日志文件路径
# 3. 调整 Tag 名称以便在 Grafana 中区分不同来源的日志
# 4. 根据需要修改解析器以匹配您的日志格式
# 5. 保存文件后重启 Fluent Bit 服务使配置生效

# ====== 测试配置 ======
# 使用以下命令测试配置是否正确：
# docker exec fluentbit /opt/fluent-bit/bin/fluent-bit --config /fluent-bit/etc/fluent-bit.conf --dry-run 