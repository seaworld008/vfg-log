# ====== Java应用日志收集配置模板 ======
# 复制此文件内容到 fluent-bit.conf 或单独的配置文件中使用

# ====== INPUT配置 ======

# Java应用日志收集（支持多行日志）
[INPUT]
    Name              tail
    Tag               java.app
    Path              /var/log/java-app/*.log
    Path_Key          file_path
    Parser            java_multiline
    DB                /tmp/flb_java_app.db
    Mem_Buf_Limit     50MB
    Skip_Long_Lines   On
    Refresh_Interval  5
    storage.type      filesystem
    multiline.parser  java

# Java GC日志收集
[INPUT]
    Name              tail
    Tag               java.gc
    Path              /var/log/java-app/gc.log
    Parser            java_gc
    DB                /tmp/flb_java_gc.db
    Mem_Buf_Limit     20MB
    Skip_Long_Lines   On
    Refresh_Interval  10
    storage.type      filesystem

# Java Logback TCP输入（用于直接从应用发送日志）
[INPUT]
    Name              tcp
    Tag               java.logback
    Listen            0.0.0.0
    Port              5170
    Format            json
    storage.type      filesystem

# ====== PARSER配置 ======

# Java应用日志解析器 (支持logback/log4j格式)
[PARSER]
    Name         java_multiline
    Format       regex
    Regex        ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \[(?<thread>[^\]]+)\] (?<level>\w+) +(?<logger>[^ ]+) - (?<message>.*)$
    Time_Key     time
    Time_Format  %Y-%m-%d %H:%M:%S.%L

# Java GC日志解析器
[PARSER]
    Name         java_gc
    Format       regex
    Regex        ^(?<time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}[+-]\d{4}): (?<gc_info>.*)$
    Time_Key     time
    Time_Format  %Y-%m-%dT%H:%M:%S.%L%z

# ====== MULTILINE_PARSER配置 ======

# Java多行日志解析器（用于异常堆栈跟踪）
[MULTILINE_PARSER]
    name          java
    type          regex
    flush_timeout 1000
    rule      "start_state"   "^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}"  "cont"
    rule      "cont"          "^(?!\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})"  "cont"

# ====== FILTER配置 ======

# Java日志标签处理
[FILTER]
    Name          modify
    Match         java.*
    Add           service java-app
    Add           log_type java
    Add           environment production

[FILTER]
    Name          record_modifier
    Match         java.app
    Record        service java-app
    Record        log_type application
    Record        source_type file

[FILTER]
    Name          record_modifier
    Match         java.gc
    Record        service java-app
    Record        log_type gc
    Record        source_type file

[FILTER]
    Name          record_modifier
    Match         java.logback
    Record        service java-app
    Record        log_type application
    Record        source_type tcp

# 提取异常信息
[FILTER]
    Name          regex
    Match         java.app
    Regex         message (?<exception_class>[a-zA-Z0-9.]+Exception[a-zA-Z0-9]*):(?<exception_message>.*)
    Add           has_exception true

# 日志级别标准化
[FILTER]
    Name          modify
    Match         java.*
    Set           level ${level}
    Condition     Key_value_matches level ERROR
    Set           severity_level 3

[FILTER]
    Name          modify
    Match         java.*
    Set           level ${level}
    Condition     Key_value_matches level WARN
    Set           severity_level 2

[FILTER]
    Name          modify
    Match         java.*
    Set           level ${level}
    Condition     Key_value_matches level INFO
    Set           severity_level 1

[FILTER]
    Name          modify
    Match         java.*
    Set           level ${level}
    Condition     Key_value_matches level DEBUG
    Set           severity_level 0

# 提取请求跟踪ID
[FILTER]
    Name          regex
    Match         java.app
    Regex         message .*\[(?<trace_id>[a-f0-9]{32})\].*
    Add           has_trace_id true

# 过滤心跳和健康检查日志
[FILTER]
    Name          grep
    Match         java.app
    Exclude       message heartbeat
    Exclude       message health-check

# 性能日志分类
[FILTER]
    Name          modify
    Match         java.app
    Condition     Key_value_matches message .*performance.*
    Add           log_category performance

[FILTER]
    Name          modify
    Match         java.app
    Condition     Key_value_matches message .*sql.*
    Add           log_category database

[FILTER]
    Name          modify
    Match         java.app
    Condition     Key_value_matches message .*http.*
    Add           log_category http

# ====== OUTPUT配置 ======

# 发送到VictoriaLogs（远程部署+基础认证）
[OUTPUT]
    Name              http
    Match             java.*
    Host              192.168.1.100
    Port              9428
    URI               /insert/jsonline?_stream_fields=service,log_type,logger,level&_msg_field=message&_time_field=time
    Format            json_lines
    Json_date_key     time
    Json_date_format  iso8601
    Header            Content-Type application/stream+json
    Header            Authorization Basic dXNlcjpwYXNzd29yZA==
    # 上面的Authorization header是 user:password 的Base64编码
    # 生成方法: echo -n 'your_username:your_password' | base64
    # 替换上面的Base64字符串为你的实际用户名密码编码
    tls               off
    tls.verify        off
    compress          gzip
    Retry_Limit       3
    workers           2
    storage.total_limit_size 200M

# 发送到VictoriaLogs（HTTPS+基础认证）
# [OUTPUT]
#     Name              http
#     Match             java.*
#     Host              secure-vmlog.company.com
#     Port              443
#     URI               /insert/jsonline?_stream_fields=service,log_type,logger,level&_msg_field=message&_time_field=time
#     Format            json_lines
#     Json_date_key     time
#     Json_date_format  iso8601
#     Header            Content-Type application/stream+json
#     Header            Authorization Basic dXNlcjpwYXNzd29yZA==
#     # 替换为你的用户名密码Base64编码
#     tls               on
#     tls.verify        on
#     # tls.ca_file       /etc/ssl/certs/vmlog-ca.crt    # 可选：指定CA证书
#     # tls.crt_file      /etc/ssl/certs/client.crt      # 可选：客户端证书
#     # tls.key_file      /etc/ssl/private/client.key    # 可选：客户端私钥
#     compress          gzip
#     Retry_Limit       3
#     workers           2
#     storage.total_limit_size 200M

# 发送到VictoriaLogs（多租户+基础认证）
# [OUTPUT]
#     Name              http
#     Match             java.*
#     Host              192.168.1.100
#     Port              9428
#     URI               /insert/jsonline?_stream_fields=service,log_type,logger,level&_msg_field=message&_time_field=time
#     Format            json_lines
#     Json_date_key     time
#     Json_date_format  iso8601
#     Header            Content-Type application/stream+json
#     Header            Authorization Basic dXNlcjpwYXNzd29yZA==
#     Header            AccountID 2
#     Header            ProjectID 1
#     Header            X-Tenant java-production
#     Header            X-Environment prod
#     Header            X-Service-Name my-java-app
#     # 替换为你的用户名密码Base64编码和租户信息
#     tls               off
#     tls.verify        off
#     compress          gzip
#     Retry_Limit       3
#     workers           2
#     storage.total_limit_size 200M

# 发送到VictoriaLogs（企业版+JWT Token认证）
# [OUTPUT]
#     Name              http
#     Match             java.*
#     Host              enterprise-logs.company.com
#     Port              443
#     URI               /insert/jsonline?_stream_fields=service,log_type,logger,level&_msg_field=message&_time_field=time
#     Format            json_lines
#     Json_date_key     time
#     Json_date_format  iso8601
#     Header            Content-Type application/stream+json
#     Header            Authorization Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9
#     Header            X-Organization-ID org-12345
#     Header            X-Team-ID team-java
#     # 替换为你的实际JWT Token和组织信息
#     tls               on
#     tls.verify        on
#     compress          gzip
#     Retry_Limit       3
#     workers           2
#     storage.total_limit_size 200M

# 发送到VictoriaLogs（API Key+多环境认证）
# [OUTPUT]
#     Name              http
#     Match             java.*
#     Host              api.logs-platform.com
#     Port              443
#     URI               /insert/jsonline?_stream_fields=service,log_type,logger,level&_msg_field=message&_time_field=time
#     Format            json_lines
#     Json_date_key     time
#     Json_date_format  iso8601
#     Header            Content-Type application/stream+json
#     Header            X-API-Key SK-java-prod-1234567890abcdef
#     Header            X-Environment production
#     Header            X-Region us-east-1
#     Header            X-Source java-microservice
#     # 替换为你的实际API Key和环境信息
#     tls               on
#     tls.verify        on
#     compress          gzip
#     Retry_Limit       3
#     workers           2
#     storage.total_limit_size 200M

# 发送到VictoriaLogs（云服务提供商认证）
# [OUTPUT]
#     Name              http
#     Match             java.*
#     Host              logs.cloud-provider.com
#     Port              443
#     URI               /insert/jsonline?_stream_fields=service,log_type,logger,level&_msg_field=message&_time_field=time
#     Format            json_lines
#     Json_date_key     time
#     Json_date_format  iso8601
#     Header            Content-Type application/stream+json
#     Header            Authorization Bearer $(cat /var/secrets/cloud-token)
#     Header            X-Cloud-Project-ID project-12345
#     Header            X-Cloud-Region asia-east1
#     # 使用云服务商的IAM Token或服务账号认证
#     tls               on
#     tls.verify        on
#     compress          gzip
#     Retry_Limit       3
#     workers           2
#     storage.total_limit_size 200M

# 使用示例：
# 1. 修改日志文件路径 (/var/log/java-app/*.log)
# 2. 调整服务名称 (service java-app)
# 3. 修改TCP端口 (Port 5170)
# 4. 根据实际日志格式调整正则表达式
# 5. 添加或删除过滤器规则
# 6. 选择合适的OUTPUT配置并取消注释

# Logback配置示例 (logback-spring.xml):
# <appender name="FLUENT_BIT" class="ch.qos.logback.classic.net.SocketAppender">
#     <remoteHost>fluent-bit-host</remoteHost>
#     <port>5170</port>
#     <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
#         <providers>
#             <timestamp/>
#             <logLevel/>
#             <loggerName/>
#             <message/>
#             <mdc/>
#             <arguments/>
#             <stackTrace/>
#         </providers>
#     </encoder>
# </appender> 